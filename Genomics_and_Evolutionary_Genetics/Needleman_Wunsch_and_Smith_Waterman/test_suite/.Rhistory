source('C:/Users/User/Desktop/Computational Biology/Exercise1/Law_Toby.R')
source('C:/Users/User/Desktop/Computational Biology/Exercise1/CB_HW1_test_V0/run_tests.R')
source('C:/Users/User/Desktop/Computational Biology/Exercise1/CB_HW1_test_V0/run_tests.R')
source('C:/Users/User/Desktop/Computational Biology/Exercise1/CB_HW1_test_V0/run_tests.R')
init_score_matrix = function(nrow, ncol, local, score_gap) {
# Initialize the score matrix with zeros.
# If the alignment is global, the leftmost column and the top row will have incremental gap scores,
# i.e. if the gap score is -2 and the number of columns is 4, the top row will be [0, -2, -4, -6].
# nrow: number of rows in the matrix
# ncol: number of columns in the matrix
if (local == TRUE){ # initialize empty score matrix for local alignment
score_matrix <- matrix(0, nrow, ncol)
} else if (local == FALSE){ #initialize score matrix for global alignment
score_matrix <- matrix(0, nrow, ncol)
for (i in 2:nrow) {
score_matrix[i,1] <- (i-1)*score_gap
}
for (j in 2:ncol) {
score_matrix[1,j] <- (j-1)*score_gap
}
}
# Return the initialized empty score matrix
# score_matrix: nrow by ncol matrix
return(score_matrix)
}
init_path_matrix = function(nrow, ncol, local) {
# Initialize the path matrix with empty values, except the top row and the leftmost column if global alignment.
# If global alignment, the top row has "left" on all positions except 1st.
# Similarly, leftmost column has "up" on all positions except 1st.
# nrow: number of rows in the matrix
# ncol: number of columns in the matrix
if (local == TRUE) {
path_matrix <- matrix("", nrow, ncol)
} else if (local == FALSE) {
path_matrix <- matrix("", nrow, ncol)
for (i in 2:nrow) {
path_matrix[i,1] <- "up"
}
for (j in 2:ncol) {
path_matrix[1,j] <- "left"
}
}
# Return the initialized empty path matrix
# path_matrix: nrow by ncol matrix
return(path_matrix)
}
get_best_score_and_path = function(row, col, nucA, nucB, score_matrix, score_gap, score_match, score_mismatch, local) {
# Compute the score and the best path for each particular position in the score matrix
# nucA: nucleotide in sequence A: note that as an example, nucA[2] corresponds to cell on the 3rd row of the matrix
# nucB: nucleotide in sequence B:
# row: row-wise position in the matrix
# col: column-wise position in the matrix
# score_matrix: the score_matrix that is being filled out
if (local == TRUE) { #for local alignment
#determine whether it is a match or mismatch at that position, then compute the respective score
if (nucA == nucB) {
case1 <- score_matrix[row-1, col-1] + score_match
} else if (nucA != nucB) {
case1 <- score_matrix[row-1, col-1] + score_mismatch
}
#compute the score for a gap in that position
case2 <- score_matrix[row, col-1] + score_gap
case3 <- score_matrix[row-1, col] + score_gap
#getting the maximum score for the position
score <- max(c(0, case1, case2, case3))
# getting the best path
if (score == case1) {
path <- "diag"
} else if (score == case2) {
path <- "left"
} else if (score == case3) {
path <- "up"
} else if (score == 0) {
path <- "-"
}
} else if (local == FALSE) { #for global alignment
#determine whether it is a match or mismatch at that position, then compute the respective score
if (nucA == nucB) {
case1 <- score_matrix[row-1, col-1] + score_match
} else if (nucA != nucB) {
case1 <- score_matrix[row-1, col-1] + score_mismatch
}
#compute the score for a gap in that position
case2 <- score_matrix[row, col-1] + score_gap
case3 <- score_matrix[row-1, col] + score_gap
#getting the maximum score
score <- max(c(case1, case2, case3))
# getting the best path
if (score == case1) {
path <- "diag"
} else if (score == case2) {
path <- "left"
} else if (score == case3) {
path <- "up"
}
}
# Return the best score for the particular position in the score matrix
# In the case that there are several equally good paths available, return any one of them.
# score: best score at this position
# path: path corresponding to the best score, one of ["diag", "up", "left"] in the global case and of ["diag", "up", "left", "-"] in the local case
return(list("score"=score, "path"=path))
}
fill_matrices = function(seqA, seqB, score_gap, score_match, score_mismatch, local, score_matrix, path_matrix) {
# Compute the full score and path matrices
# score_matrix: initial matrix of the scores
# path_matrix: initial matrix of paths
#run the get_best_score_and_path function iteratively for each cell, get the list(score, path), and
#append the score_matrix and path_matrix with the values of "score" and "path" respecitively
if (local == TRUE) {
for (i in 2:(nchar(seqA) + 1)) {
for (j in 2:(nchar(seqB) + 1)) {
score_and_path <- get_best_score_and_path(row = i, col = j, nucA = substr(seqA, i-1, i-1), nucB = substr(seqB, j-1, j-1), local = TRUE, score_matrix, score_gap, score_match, score_mismatch)
score_matrix[i,j] <- score_and_path$score
path_matrix[i,j] <-score_and_path$path
}
}
} else if (local == FALSE) {
for (i in 2:(nchar(seqA) + 1)) {
for (j in 2:(nchar(seqB) + 1)) {
score_and_path <- get_best_score_and_path(row = i, col = j, nucA = substr(seqA, i-1, i-1), nucB = substr(seqB, j-1, j-1), local = FALSE, score_matrix, score_gap, score_match, score_mismatch)
score_matrix[i,j] <- score_and_path$score
path_matrix[i,j] <-score_and_path$path
}
}
}
# Return the full score and path matrices
# score_matrix: filled up matrix of the scores
# path_matrix: filled up matrix of paths
return(list("score_matrix"=score_matrix, "path_matrix"=path_matrix))
}
get_best_move = function(nucA, nucB, path, row, col) {
# Compute the aligned characters at the given position in the score matrix and return the new position,
# i.e. if the path is diagonal both the characters in seqA and seqB should be added,
# if the path is up or left, there is a gap in one of the sequences.
# nucA: nucleotide in sequence A
# nucB: nucleotide in sequence B
# path: best path pre-computed for the given position
# row: row-wise position in the matrix
# col: column-wise position in the matrix
#according to the value of path, record the alignment characters (nucleotide bases/gap) and return them as char1 and char2,
#also return the new position in the path_matrix/score_matrix
if (path == "diag") {
char1 <- nucA
char2 <- nucB
newrow <- row - 1
newcol <- col - 1
} else if (path == "left") {
char1 <- "-"
char2 <- nucB
newrow <- row
newcol <- col - 1
} else if (path == "up") {
char1 <- nucA
char2 <- "-"
newrow <- row - 1
newcol <- col
}
# Return the new row and column and the aligned characters
# newrow: row if gap in seqA, row - 1 otherwise
# newcol: col if gap in seqB, col - 1 otherwise
# char1: '-' if gap in seqA, appropriate character if a match
# char2: '-' if gap in seqB, appropriate character if a match
return(list("newrow"=newrow, "newcol"=newcol, "char1"=char1, "char2"=char2))
}
get_best_alignment = function(seqA, seqB, score_matrix, path_matrix, local) {
# Return the best alignment from the pre-computed score matrix
# score_matrix: filled up matrix of the scores
# path_matrix: filled up matrix of paths
#intitalize empty alignments in form of a vector with two strings
alignment <- c("","")
if (local == TRUE) { # for local alignment
#find the cell with the best score in the score_matrix, and the indices of its position
score <- max(score_matrix)
initial_pos <- which(score_matrix == max(score_matrix), arr.ind = TRUE)
pa <- initial_pos[1,1]
pb <- initial_pos[1,2]
#look at value of path_matrix at the above indices, run the get_best_move function to get the
#alignemnt at the current position, as well as the next position on the path_matrix
while (score_matrix[pa,pb] > 0) {
best_move <- get_best_move(nucA = substr(seqA,pa-1, pa-1), nucB = substr(seqB,pb-1, pb-1), path = path_matrix[pa,pb], row = pa, col = pb)
#prepend the characters in seqA and seqB or gap to "alignment" vector
alignment[[1]] <- paste0(best_move[["char1"]], alignment[[1]])
alignment[[2]] <- paste0(best_move[["char2"]], alignment[[2]])
pa <- best_move$newrow
pb <- best_move$newcol
}
} else if (local == FALSE) { #for global alignment
#initialize the starting position as at the end of both sequences, and record the score and indices of this position
pa <- nchar(seqA) + 1
pb <- nchar(seqB) + 1
score <- score_matrix[pa, pb]
while ((pa > 1) || (pb > 1) == TRUE) { #we find the alignment characters for each position from the start to end of the sequences
best_move <- get_best_move(nucA = substr(seqA,pa-1, pa-1), nucB = substr(seqB,pb-1, pb-1), path = path_matrix[pa,pb], row = pa, col = pb)
alignment[[1]] <- paste0(best_move[["char1"]], alignment[[1]])
alignment[[2]] <- paste0(best_move[["char2"]], alignment[[2]])
pa <- best_move$newrow
pb <- best_move $newcol
}
}
# Return the best score and alignment (or one thereof if there are multiple with equal score)
# score: score of the best alignment
# alignment: the actual alignment in the form of a vector of two strings
return(list("score"=score, "alignment"=alignment))
}
align = function(seqA, seqB, score_gap, score_match, score_mismatch, local) {
# Align the two sequences given the scoring scheme
# For testing purposes, use seqA for the rows and seqB for the columns of the matrices
# Initialize score and path matrices
score_matrix <- init_score_matrix (nrow = nchar(seqA) + 1 , ncol = nchar(seqB) + 1, local, score_gap)
path_matrix <- init_path_matrix (nrow = nchar(seqA) + 1, ncol = nchar(seqB) + 1, local)
# Fill in the matrices with scores and paths using dynamic programming
fill_matrices_output <- fill_matrices(seqA, seqB, score_gap, score_match, score_mismatch, local, score_matrix, path_matrix)
score_matrix <- fill_matrices_output$score_matrix
path_matrix <- fill_matrices_output$path_matrix
# Get the best score and alignment (or one thereof if there are multiple with equal score)
get_best_alignment_output <- get_best_alignment(seqA, seqB, score_matrix, path_matrix, local)
result <- get_best_alignment_output
# Return the best score and alignment (or one thereof if there are multiple with equal score)
# Returns the same value types as get_best_alignment
return(result)
}
test_align = function() {
seqA = "TGCTCTGT"
seqB = "TACTATCAT"
score_gap = -2
score_match = +3
score_mismatch = -1
local = T
result = align(seqA, seqB, score_gap, score_match, score_mismatch, local)
print(result$alignment)
print(result$score)
}
test_align()
