# ???
Q <- create_TN93_Q_matrix(pi, alpha1, alpha2, beta)
# Set up the starting sequence @ the root of the tree
# ???
starting_sequence <- get_starting_sequence(pi, N)
# Prepare a list to store evolved sequences at each node
# Here it just says we create an empty list, and the sequence that corresponds to the tree$edge[1,1] (ie. node 5)
# is the starting_sequence
sequence_per_node = list()
sequence_per_node[[tree$edge[1,1]]] = starting_sequence
# Walk the tree while evolving sequences along appropriate branches
# For each branch, we get the numerical labels of the parent and child nodes from tree$edge.
# We also get the branch_length (tb), which we need to compute the transistion probability matrix in the
# get_evolved_sequence function.
# We then get the parent sequence from the sequence_per_node list, which we will evolve away from.
for (i in 1:length(tree$edge.length)) {
node_parent = tree$edge[i, 1]
node_child = tree$edge[i, 2]
branch_length = tree$edge.length[i]
parent_sequence = sequence_per_node[[node_parent]]
# ???
# The output of get_evolved_sequence will be the child_sequence.
child_sequence <- get_evolved_sequence (sequence = parent_sequence, branch_length = branch_length, Q = Q)
# We store the evolved sequence for the child node in the sequence_per_node list.
sequence_per_node[[node_child]] = child_sequence
}
# Transform the alignment from nucleotide indices to nucleotide characters
# and filter out the sequences at the tips
alignment = list()
for (i in 1:length(tree$tip.label)) {
alignment[[tree$tip.label[i]]] = transform_to_nucleotides(sequence_per_node[[i]])
}
# Return the simulated alignment.
# The alignment should be in the form of a list where the tip label corresponds to the
# appropriate simulated sequence, e.g. alignment$human = ACTG
return(alignment)
}
test_simulation = function() {
library(ape)
newick_tree = "(orangutan:13,(gorilla:10.25,(human:5.5,chimp:5.5):4.75):2.75);"
N = 40
beta = 0.035
alpha1 = 0.044229
alpha2 = 0.021781
pi = c(0.22, 0.26, 0.33, 0.19)
result = simulate_evolution(newick_tree, pi, alpha1, alpha2, beta, N)
print(result$orangutan)
print(result$gorilla)
print(result$human)
print(result$chimp)
result
}
test_simulation()
beta*pi[4]
N = 40
beta = 0.035
alpha1 = 0.044229
alpha2 = 0.021781
pi = c(0.22, 0.26, 0.33, 0.19)
beta*pi[4]
alpha1*pi[2]
Q
# Set up the Q matrix
# ???
Q <- create_TN93_Q_matrix(pi, alpha1, alpha2, beta)
Q
sapply(Q, round(, digits = 9))
round(Q, digits = 9))
round(Q, digits = 9)
rowSums(Q)
round(Q, digits = 2)
rowSums(Q)
#bind the rows together to give the substitution rate matrix Q
Q <- rbind(row_t, row_c, row_a, row_g)
# ???
#calculate the substitution rates for when the starting nucleotide is T, C, A, G, organize them into rows, and initialize
#the value where the nucleotide remains the same (the diagonal of the matrix)) to 0.
row_t <- c(0, alpha1*pi[2], beta*pi[3], beta*pi[4])
row_c <- c(alpha1*pi[1], 0, beta*pi[3], beta*pi[4])
row_a <- c(beta*pi[1], beta*pi[2], 0, alpha2*pi[4])
row_g <- c(beta*pi[1], beta*pi[2], alpha2*pi[3], 0)
#bind the rows together to give the substitution rate matrix Q
Q <- rbind(row_t, row_c, row_a, row_g)
Q
#each row adds up to 0.
sum_row <- rowSums(Q)
diag(Q) <- sum_row * -1
# Return the transition rate matrix
# Q: 4 by 4 matrix of rates
return(Q)
Q
# Return the transition rate matrix
# Q: 4 by 4 matrix of rates
return(Q)
source('E:/backup for CB assignment 2/LAW_Toby.R')
source('C:/Users/User/Desktop/Computational Biology/Exercise 2/CB_HW2_test_V0/run_tests.R')
#########################################################
#######        COMPUTATIONAL BIOLOGY         ############
#######             HOMEWORK 2               ############
#########################################################
#                                                       #
# Simulate the evolution of sequences on a fixed tree   #
# under the TN93 sequence evolution model               #
#                                                       #
#########################################################
#########################################################
#########################################################
######    Code below this should not be changed   #######
#########################################################
library(Matrix)
library(ape)
nucleotides = c("T", "C", "A", "G")
get_nucleotide_from_number = function(i) {
# Transform a nucleotide number into the appropriate letter: 1, 2, 3, 4 represents "T", "C", "A", "G" respectively
return(nucleotides[i])
}
transform_to_nucleotides = function(sequence) {
# Transform a sequence of nucleotide numbers into the appropriate character sequence, this is used by simulate_evolution.
nucl_sequence = paste0(lapply(sequence, get_nucleotide_from_number), collapse = "")
return(nucl_sequence)
}
#########################################################
######    Code above this should not be changed   #######
#########################################################
# In all functions the following parameters are the same:
# pi: the stationary frequencies of nucleotides
# alpha1: rate coefficient for the C <-> T transition
# alpha2: rate coefficient for the A <-> G transition
# beta: rate coefficient for transversions
# N: number of sites in the simulated alignment
create_TN93_Q_matrix = function(pi, alpha1, alpha2, beta) {
# Create the TN93 transition rate matrix Q as specified in the assignment.
# ???
#calculate the substitution rates for when the starting nucleotide is T, C, A, G, organize them into rows, and initialize
#the value where the nucleotide remains the same (the diagonal of the matrix)) to 0.
row_t <- c(0, alpha1*pi[2], beta*pi[3], beta*pi[4])
row_c <- c(alpha1*pi[1], 0, beta*pi[3], beta*pi[4])
row_a <- c(beta*pi[1], beta*pi[2], 0, alpha2*pi[4])
row_g <- c(beta*pi[1], beta*pi[2], alpha2*pi[3], 0)
#bind the rows together to give the substitution rate matrix Q
Q <- rbind(row_t, row_c, row_a, row_g)
#extract of sum of rates in each row, take its negative value and append it to the diagonal values of Q. Now the sum of
#each row adds up to 0.
sum_row <- rowSums(Q)
diag(Q) <- sum_row * -1
# Return the transition rate matrix
# Q: 4 by 4 matrix of rates
return(Q)
}
get_starting_nucleotide = function(pi) {
# Sample a starting nucleotide from the stationary distribution
# ???
#sample from the values 1, 2, 3, 4 using the probability mass function defined by pi
nucleotide <- sample((c(1, 2, 3, 4)), size = 1, prob = pi)
# Return the sampled nucleotide
# nucleotide: integer nucleotide value
return(nucleotide)
}
get_starting_sequence = function(pi, N) {
# Sample a starting sequence of length N
# ???
#initialize starting_sequence as a empty vector which we will fill with integers
starting_sequence <- vector(mode = "integer")
#Using the get_starting_nucleotide function, sample for a nucleotide for N times to get our starting sequence
for (i in 1:N) {
starting_sequence <- c(starting_sequence, get_starting_nucleotide(pi))
}
# Return the sampled sequence
# starting_sequence: vector of integer nucleotide values
return(starting_sequence)
}
get_evolved_sequence = function(sequence, branch_length, Q) {
# Evolve a given nucleotide sequence along a branch of specified length.
# sequence: nucleotide sequence at the beginning of the branch
# branch_length: the length of the branch along which evolution happens
# Q: the substitution rate matrix
# ???
#first generate the transition probability matrix P, using branch_length and Q
P <- expm(Q)**branch_length
evolved_sequence <- vector(mode = "integer")
for (i in 1:length(sequence)) {
ori_nuc <- sequence[i]
evolved_nucleotide <- get_starting_nucleotide (P[ori_nuc,])
evolved_sequence[i] <- evolved_nucleotide
}
# Return the nucleotide sequence after all positions have evolved along the given branch.
# evolved_sequence: the vector of new integer nucleotide values at the end of the branch
return(evolved_sequence)
}
simulate_evolution = function(newick_tree, pi, alpha1, alpha2, beta, N) {
# Simulate evolution along the given tree.
# newick_tree: the tree in newick text format
# Transfrom the tree from text format to an object of the phylo class which represents the tree in R
tree = read.tree(text = newick_tree)
# Reorder the tree for easier traversing
tree = reorder(tree, order = "cladewise")
# Set up the Q matrix
# ???
Q <- create_TN93_Q_matrix(pi, alpha1, alpha2, beta)
# Set up the starting sequence @ the root of the tree
# ???
starting_sequence <- get_starting_sequence(pi, N)
# Prepare a list to store evolved sequences at each node
# Here it just says we create an empty list, and the sequence that corresponds to the tree$edge[1,1] (ie. node 5)
# is the starting_sequence
sequence_per_node = list()
sequence_per_node[[tree$edge[1,1]]] = starting_sequence
# Walk the tree while evolving sequences along appropriate branches
# For each branch, we get the numerical labels of the parent and child nodes from tree$edge.
# We also get the branch_length (tb), which we need to compute the transistion probability matrix in the
# get_evolved_sequence function.
# We then get the parent sequence from the sequence_per_node list, which we will evolve away from.
for (i in 1:length(tree$edge.length)) {
node_parent = tree$edge[i, 1]
node_child = tree$edge[i, 2]
branch_length = tree$edge.length[i]
parent_sequence = sequence_per_node[[node_parent]]
# ???
# The output of get_evolved_sequence will be the child_sequence.
child_sequence <- get_evolved_sequence (sequence = parent_sequence, branch_length = branch_length, Q = Q)
# We store the evolved sequence for the child node in the sequence_per_node list.
sequence_per_node[[node_child]] = child_sequence
}
# Transform the alignment from nucleotide indices to nucleotide characters
# and filter out the sequences at the tips
alignment = list()
for (i in 1:length(tree$tip.label)) {
alignment[[tree$tip.label[i]]] = transform_to_nucleotides(sequence_per_node[[i]])
}
# Return the simulated alignment.
# The alignment should be in the form of a list where the tip label corresponds to the
# appropriate simulated sequence, e.g. alignment$human = ACTG
return(alignment)
}
test_simulation = function() {
library(ape)
newick_tree = "(orangutan:13,(gorilla:10.25,(human:5.5,chimp:5.5):4.75):2.75);"
N = 40
beta = 0.035
alpha1 = 0.044229
alpha2 = 0.021781
pi = c(0.22, 0.26, 0.33, 0.19)
result = simulate_evolution(newick_tree, pi, alpha1, alpha2, beta, N)
print(result$orangutan)
print(result$gorilla)
print(result$human)
print(result$chimp)
result
}
N = 40
beta = 0.035
alpha1 = 0.044229
alpha2 = 0.021781
pi = c(0.22, 0.26, 0.33, 0.19)
# ???
#calculate the substitution rates for when the starting nucleotide is T, C, A, G, organize them into rows, and initialize
#the value where the nucleotide remains the same (the diagonal of the matrix)) to 0.
row_t <- c(0, alpha1*pi[2], beta*pi[3], beta*pi[4])
row_c <- c(alpha1*pi[1], 0, beta*pi[3], beta*pi[4])
row_a <- c(beta*pi[1], beta*pi[2], 0, alpha2*pi[4])
row_g <- c(beta*pi[1], beta*pi[2], alpha2*pi[3], 0)
#bind the rows together to give the substitution rate matrix Q
Q <- rbind(row_t, row_c, row_a, row_g)
#extract of sum of rates in each row, take its negative value and append it to the diagonal values of Q. Now the sum of
#each row adds up to 0.
sum_row <- rowSums(Q)
diag(Q) <- sum_row * -1
# Return the transition rate matrix
# Q: 4 by 4 matrix of rates
return(Q)
# ???
#first generate the transition probability matrix P, using branch_length and Q
P <- expm(Q)**branch_length
source('E:/backup for CB assignment 2/LAW_Toby.R')
source('C:/Users/User/Desktop/Computational Biology/Exercise 2/CB_HW2_test_V0/run_tests.R')
# ???
#first generate the transition probability matrix P, using branch_length and Q
exponent <- Q*branch_length
source('E:/backup for CB assignment 2/LAW_Toby.R')
source('C:/Users/User/Desktop/Computational Biology/Exercise 2/CB_HW2_test_V0/run_tests.R')
source('C:/Users/User/Desktop/Computational Biology/Exercise 2/LAW_Toby.R')
source('C:/Users/User/Desktop/Computational Biology/Exercise 2/CB_HW2_test_V0/run_tests.R')
#########################################################
#######        COMPUTATIONAL BIOLOGY         ############
#######             HOMEWORK 2               ############
#########################################################
#                                                       #
# Simulate the evolution of sequences on a fixed tree   #
# under the TN93 sequence evolution model               #
#                                                       #
#########################################################
#########################################################
#########################################################
######    Code below this should not be changed   #######
#########################################################
library(Matrix)
library(ape)
nucleotides = c("T", "C", "A", "G")
get_nucleotide_from_number = function(i) {
# Transform a nucleotide number into the appropriate letter: 1, 2, 3, 4 represents "T", "C", "A", "G" respectively
return(nucleotides[i])
}
transform_to_nucleotides = function(sequence) {
# Transform a sequence of nucleotide numbers into the appropriate character sequence, this is used by simulate_evolution.
nucl_sequence = paste0(lapply(sequence, get_nucleotide_from_number), collapse = "")
return(nucl_sequence)
}
#########################################################
######    Code above this should not be changed   #######
#########################################################
# In all functions the following parameters are the same:
# pi: the stationary frequencies of nucleotides
# alpha1: rate coefficient for the C <-> T transition
# alpha2: rate coefficient for the A <-> G transition
# beta: rate coefficient for transversions
# N: number of sites in the simulated alignment
create_TN93_Q_matrix = function(pi, alpha1, alpha2, beta) {
# Create the TN93 transition rate matrix Q as specified in the assignment.
# ???
#calculate the substitution rates for when the starting nucleotide is T, C, A, G, organize them into rows, and initialize
#the value where the nucleotide remains the same (the diagonal of the matrix)) to 0.
row_t <- c(0, alpha1*pi[2], beta*pi[3], beta*pi[4])
row_c <- c(alpha1*pi[1], 0, beta*pi[3], beta*pi[4])
row_a <- c(beta*pi[1], beta*pi[2], 0, alpha2*pi[4])
row_g <- c(beta*pi[1], beta*pi[2], alpha2*pi[3], 0)
#bind the rows together to give the substitution rate matrix Q
Q <- rbind(row_t, row_c, row_a, row_g)
#extract of sum of rates in each row, take its negative value and append it to the diagonal values of Q. Now the sum of
#each row adds up to 0.
sum_row <- rowSums(Q)
diag(Q) <- sum_row * -1
# Return the transition rate matrix
# Q: 4 by 4 matrix of rates
return(Q)
}
get_starting_nucleotide = function(pi) {
# Sample a starting nucleotide from the stationary distribution
# ???
#sample from the values 1, 2, 3, 4 using the probability mass function defined by pi
nucleotide <- sample((c(1, 2, 3, 4)), size = 1, prob = pi)
# Return the sampled nucleotide
# nucleotide: integer nucleotide value
return(nucleotide)
}
get_starting_sequence = function(pi, N) {
# Sample a starting sequence of length N
# ???
#initialize starting_sequence as a empty vector which we will fill with integers
starting_sequence <- vector(mode = "integer")
#Using the get_starting_nucleotide function, sample for a nucleotide for N times to get our starting sequence
for (i in 1:N) {
starting_sequence <- c(starting_sequence, get_starting_nucleotide(pi))
}
# Return the sampled sequence
# starting_sequence: vector of integer nucleotide values
return(starting_sequence)
}
get_evolved_sequence = function(sequence, branch_length, Q) {
# Evolve a given nucleotide sequence along a branch of specified length.
# sequence: nucleotide sequence at the beginning of the branch
# branch_length: the length of the branch along which evolution happens
# Q: the substitution rate matrix
# ???
#first generate the transition probability matrix P, using branch_length and Q
exponent <- Q*branch_length
P <- expm(exponent)
evolved_sequence <- vector(mode = "integer")
for (i in 1:length(sequence)) {
ori_nuc <- sequence[i]
evolved_nucleotide <- get_starting_nucleotide (P[ori_nuc,])
evolved_sequence[i] <- evolved_nucleotide
}
# Return the nucleotide sequence after all positions have evolved along the given branch.
# evolved_sequence: the vector of new integer nucleotide values at the end of the branch
return(evolved_sequence)
}
simulate_evolution = function(newick_tree, pi, alpha1, alpha2, beta, N) {
# Simulate evolution along the given tree.
# newick_tree: the tree in newick text format
# Transfrom the tree from text format to an object of the phylo class which represents the tree in R
tree = read.tree(text = newick_tree)
# Reorder the tree for easier traversing
tree = reorder(tree, order = "cladewise")
# Set up the Q matrix
# ???
Q <- create_TN93_Q_matrix(pi, alpha1, alpha2, beta)
# Set up the starting sequence @ the root of the tree
# ???
starting_sequence <- get_starting_sequence(pi, N)
# Prepare a list to store evolved sequences at each node
# Here it just says we create an empty list, and the sequence that corresponds to the tree$edge[1,1] (ie. node 5)
# is the starting_sequence
sequence_per_node = list()
sequence_per_node[[tree$edge[1,1]]] = starting_sequence
# Walk the tree while evolving sequences along appropriate branches
# For each branch, we get the numerical labels of the parent and child nodes from tree$edge.
# We also get the branch_length (tb), which we need to compute the transistion probability matrix in the
# get_evolved_sequence function.
# We then get the parent sequence from the sequence_per_node list, which we will evolve away from.
for (i in 1:length(tree$edge.length)) {
node_parent = tree$edge[i, 1]
node_child = tree$edge[i, 2]
branch_length = tree$edge.length[i]
parent_sequence = sequence_per_node[[node_parent]]
# ???
# The output of get_evolved_sequence will be the child_sequence.
child_sequence <- get_evolved_sequence (sequence = parent_sequence, branch_length = branch_length, Q = Q)
# We store the evolved sequence for the child node in the sequence_per_node list.
sequence_per_node[[node_child]] = child_sequence
}
# Transform the alignment from nucleotide indices to nucleotide characters
# and filter out the sequences at the tips
alignment = list()
for (i in 1:length(tree$tip.label)) {
alignment[[tree$tip.label[i]]] = transform_to_nucleotides(sequence_per_node[[i]])
}
# Return the simulated alignment.
# The alignment should be in the form of a list where the tip label corresponds to the
# appropriate simulated sequence, e.g. alignment$human = ACTG
return(alignment)
}
test_simulation = function() {
library(ape)
newick_tree = "(orangutan:13,(gorilla:10.25,(human:5.5,chimp:5.5):4.75):2.75);"
N = 40
beta = 0.035
alpha1 = 0.044229
alpha2 = 0.021781
pi = c(0.22, 0.26, 0.33, 0.19)
result = simulate_evolution(newick_tree, pi, alpha1, alpha2, beta, N)
print(result$orangutan)
print(result$gorilla)
print(result$human)
print(result$chimp)
result
}
test_simulation()
P
N = 40
beta = 0.035
alpha1 = 0.044229
alpha2 = 0.021781
pi = c(0.22, 0.26, 0.33, 0.19)
# ???
#calculate the substitution rates for when the starting nucleotide is T, C, A, G, organize them into rows, and initialize
#the value where the nucleotide remains the same (the diagonal of the matrix)) to 0.
row_t <- c(0, alpha1*pi[2], beta*pi[3], beta*pi[4])
row_c <- c(alpha1*pi[1], 0, beta*pi[3], beta*pi[4])
row_a <- c(beta*pi[1], beta*pi[2], 0, alpha2*pi[4])
row_g <- c(beta*pi[1], beta*pi[2], alpha2*pi[3], 0)
#bind the rows together to give the substitution rate matrix Q
Q <- rbind(row_t, row_c, row_a, row_g)
#extract of sum of rates in each row, take its negative value and append it to the diagonal values of Q. Now the sum of
#each row adds up to 0.
sum_row <- rowSums(Q)
diag(Q) <- sum_row * -1
Q
# ???
#first generate the transition probability matrix P, using branch_length and Q
exponent <- Q*100
P <- expm(exponent)
P
# ???
#first generate the transition probability matrix P, using branch_length and Q
exponent <- Q*600
P <- expm(exponent)
P
P
# ???
#first generate the transition probability matrix P, using branch_length and Q
exponent <- Q*200
P <- expm(exponent)
P
Q
# ???
#first generate the transition probability matrix P, using branch_length and Q
exponent <- Q*300
P <- expm(exponent)
P
# ???
#first generate the transition probability matrix P, using branch_length and Q
exponent <- Q*400
P <- expm(exponent)
P
# ???
#first generate the transition probability matrix P, using branch_length and Q
exponent <- Q*500
P <- expm(exponent)
P
Q
# ???
#first generate the transition probability matrix P, using branch_length and Q
exponent <- Q*600
P <- expm(exponent)
P
# ???
#first generate the transition probability matrix P, using branch_length and Q
exponent <- Q*550
P <- expm(exponent)
P
# ???
#first generate the transition probability matrix P, using branch_length and Q
exponent <- Q*570
P <- expm(exponent)
P
# ???
#first generate the transition probability matrix P, using branch_length and Q
exponent <- Q*580
P <- expm(exponent)
P
source('C:/Users/User/Desktop/Computational Biology/Exercise 2/LAW_Toby.R')
source('C:/Users/User/Desktop/Computational Biology/Exercise 2/CB_HW2_test_V0/run_tests.R')
